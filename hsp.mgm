////////////////////////////////////////////////////////////////////////////////
// 
// VanishingSubspaces(q, n)
// Generates a random subspace A in GF(p)^n of dimension n/2 of the form
// A=(I|G), where I is identity of order n/2, G matrix (of unknowns) of order
// n/2. AO is its orthogonal.
//
////////////////////////////////////////////////////////////////////////////////
function VanishingSubspaces(q, n)
E:=ZeroMatrix(GF(q), n div 2, n);
for i:=1 to n div 2 do
   E[i,i]:=1;
end for;

repeat
   A1:=Random(KMatrixSpace(GF(q), n div 2, n div 2));
until Rank(A1) eq n div 2;
A:=Random(KMatrixSpace(GF(q), n div 2, n));
for i:=1 to n div 2 do
   for j:=1 to n div 2 do
      A[i,j]:=A1[i,j];
   end for;
end for;

LT,N:=Solution(Transpose(A),Transpose(E));
W:=ZeroMatrix(GF(q),n,n);
repeat
   for i:=1 to n do
      W[i]:=W[i]+LT[i]+Random(N);
   end for;
until Rank(W) eq n;
L:=Transpose(W);

AO:=KernelMatrix(Transpose(A));
LOT,NO:=Solution(Transpose(AO),Transpose(E));
WO:=ZeroMatrix(GF(q),n,n);

repeat
   for i:=1 to n do
      WO[i]:=WO[i]+LOT[i]+Random(NO);
   end for;
until Rank(WO) eq n;
LO:=Transpose(WO);

return A, AO, L, LO;

end function;

////////////////////////////////////////////////////////////////////////////////
// 
// GenerateMonomials(n, d, EqR, R)
// Generates a list of monomials of degree [1..d] in the ring of polynomials R
// that are divisible by an element in the set {x_{n/2+1},...,x_{n}}.
//
////////////////////////////////////////////////////////////////////////////////
function GenerateMonomials(n, d, EqR, R)
Mon:=[];

for degree:=1 to d do
   for a in MonomialsOfDegree(R, degree) do
      for k:=n div 2+1 to n do
         if IsDivisibleBy(a, R.k) then
            if NormalForm(a, EqR) notin Mon then
               Mon:=Mon cat [a];
               break k;
            end if;
         end if;
      end for;
   end for;
end for;
return Mon;
end function;

////////////////////////////////////////////////////////////////////////////////
//
// RandomSinglePoly(q, n, d, Mon)
// Generates a random polynomial of degree d in n variables vanishing on the
// subspace E=(I|0).
//
////////////////////////////////////////////////////////////////////////////////
function RandomSinglePoly(q, d, Mon)
repeat
   P := &+ [Random(GF(q))*Mon[j] : j in [1..#Mon]];
until TotalDegree(P) eq d;
return P;
end function;

////////////////////////////////////////////////////////////////////////////////
//
// RandomPoly(q, m, n, d, Mon)
// Generates m distinct random polynomials of degree d in n variables (p_i)
// vanishing on E and m distinct random polynomials of degree d in n variables
// (q_j) vanishing on E.
//
////////////////////////////////////////////////////////////////////////////////
function RandomPoly(q, m, d, Mon)

P:=[]; Q:=[];
P[1]:=RandomSinglePoly(q, d, Mon);
Q[1]:=RandomSinglePoly(q, d, Mon);

Y1:={P[1]}; Y2:={Q[1]};
for i:=2 to m do
   repeat
      P[i]:=RandomSinglePoly(q, d, Mon);
   until {P[i]} meet Y1 eq {};
   Y1:=Y1 join {P[i]};
end for;

for j:=2 to m do
   repeat
      Q[j]:=RandomSinglePoly(q, d, Mon);
   until {Q[j]} meet Y2 eq {};
   Y2:=Y2 join {Q[j]};
end for;

return P, Q;
end function;

////////////////////////////////////////////////////////////////////////////////
// PublicPolys(q, m, n, d, R)
// Generates 2m random polynomials of degree d in n variables, m vanishing on A
// and m vanishing on its orthogonal AO (via transforming the polynomials P_i(x)
// vanishing on E in the polynomials P_i(xL), where L is invertible s.t. E=AL
// (and the same for Q).
////////////////////////////////////////////////////////////////////////////////
function PublicPolys(q, m, n, d, R)

EqR:=[R.i^q-R.i : i in [1..Rank(R)]];

Mon:=GenerateMonomials(n, d, EqR, R);
Pb,Qb:=RandomPoly(q, m, d, Mon);

A,AO,L,LO:=VanishingSubspaces(q, n);

g:=[&+ [L[j,i]*R.j  : j in [1..n]] : i in [1..n]];
h:=[&+ [LO[j,i]*R.j : j in [1..n]] : i in [1..n]];

P:=[]; Q:=[];
for k:=1 to m do
   P[k]:=NormalForm(Evaluate(Pb[k],g),EqR);
   Q[k]:=NormalForm(Evaluate(Qb[k],h),EqR);
end for;

return A, L, AO, LO, P, Q;

end function;

////////////////////////////////////////////////////////////////////////////////
//
// Solve(q, m, n, d, R)
// Computes the solution of the system of linear equations (p_i)_y_1,...,
// (p_i)_y_{n/2}, where (p_i)_y is the evaluation of p_i in a monomial in
// F_p[y_1,...,y_{n/2}].
//
////////////////////////////////////////////////////////////////////////////////
function Solve(q, m, n, d)

R:=PolynomialRing(GF(q), n);
A,AO,L,LO,P,Q:=PublicPolys(q, m, n, d, R);

G<[g]>:=PolynomialRing(GF(q), n^2 div 4, "grevlex");
EqG:=[G.i^q-G.i : i in [1..n^2 div 4]];
F:=PolynomialRing(G,n div 2);
EqF:=[F.i^q-F.i : i in [1..Rank(F)]];

if q gt d then
   h:=[];
   for i:=1 to n div 2 do
      h[i]:=F.i;
      h[i+n div 2]:=&+[G.(i+n div 2*t)*F.(t+1) : t in [0..n div 2-1]];
   end for;
   Ho:=[];
   for k:=1 to m do
      Ho[k]:=HomogeneousComponent(P[k],1);
   end for;
   z:=[];
   for k:=1 to m do
      z[k]:=Evaluate(Ho[k],h);
   end for;
   peqs:=[];
   for k:=1 to m do
      peqs[k]:=Coefficients(z[k]);
   end for;
   newlisteqs:=[];
   for k:=1 to m do
      newlisteqs:=newlisteqs cat [a: a in peqs[k]];
   end for;
   I:=ideal<G|newlisteqs>;
   J:=Variety(I);
end if;

if q eq 2 then
   h1:=[];
   h2:=[];
   for i:=1 to n div 2 do
      h1[i]        := F.i;
      h1[i+n div 2]:= &+[G.(i+(t-1)*(n div 2))*F.t : t in [1..n div 2]];
      h2[i]        := &+[G.(t+(i-1)*(n div 2))*F.t : t in [1..n div 2]];
      h2[i+n div 2]:= F.i;
   end for;

   z:=[];
   w:=[];
   for k:=1 to m do
      z[k]:=NormalForm(Evaluate(P[k],h1),EqF);
      w[k]:=NormalForm(Evaluate(Q[k],h2),EqF);
   end for;

   peqs:=[];qeqs:=[];
   for k:=1 to m do
      peqs[k]:=Coefficients(z[k]);
      qeqs[k]:=Coefficients(w[k]);
   end for;

   Listp:=[];Listq:=[];
   for k:=1 to m do
      for i:=1 to #peqs[k] do
         Listp:=Listp cat [peqs[k][i]];
      end for;
      for i:=1 to #qeqs[k] do
         Listq:=Listq cat [qeqs[k][i]];
      end for;
   end for;
   eqs:=Listp cat Listq;
   I:=ideal<G | eqs,EqG>;
   SetVerbose("Faugere",1);
   J:=GroebnerBasis(I);
end if;
return P,Q,J;
end function;
